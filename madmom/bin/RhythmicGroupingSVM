#!/usr/bin/env python

import argparse
import os
import pickle
from datetime import datetime

import numpy as np
import sys
from sklearn import svm
from sklearn.metrics import average_precision_score


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    train_subparser = subparsers.add_parser("train")
    train_subparser.add_argument("train_set", help="npz file with training set")
    train_subparser.add_argument("model_directory", help="directory to save the model in. it will be named with a date")
    train_subparser.add_argument("--n-frames", "-f", type=int, help="number of audio frames", default=1)
    train_subparser.add_argument("--penalty", "-c", help="Penalty parameter C of the error term.", default=1)
    train_subparser.add_argument("--kernel", "-k", help="one of [linear, polynomial rbg, sigmoid]", default='linear')
    train_subparser.add_argument("--degree", "-d", type=float, help="degree [only with polynomial]", default=1)
    train_subparser.add_argument("--coeff0", "-o", type=float, help="intercept [only with polynomial]", default=0)
    train_subparser.set_defaults(func=train)

    test_subparser = subparsers.add_parser("test")
    test_subparser.add_argument("test_set", help="npz file with test set")
    test_subparser.add_argument("model_file", help="the pickle file of the saved model")
    test_subparser.add_argument("--plot", "-p", action="store_true", help="show plots of labels versus output")
    test_subparser.add_argument("--n-frames", "-f", type=int, help="number of audio frames", default=1)
    test_subparser.set_defaults(func=test)

    model_only_subparser = subparsers.add_parser("model_only")
    model_only_subparser.add_argument("model_file", help="the pickle file of the saved model")
    model_only_subparser.set_defaults(func=model_only)

    args = parser.parse_args()

    if args == argparse.Namespace():
        parser.print_usage()
    else:
        args.func(args)


def model_only(args):
    model = pickle.loads(open(args.model_file, 'rb'))
    print(model.support_vectors_)


def train(args):
    train_set = np.load(args.train_set)
    x = train_set["x"]
    labels = train_set["labels"]
    samples_flat = []
    ys = []
    for sample, sample_labels in zip(x[:100], labels):
        # chop up each samples into short segments
        for idx in range(0, len(sample) - args.n_frames, 10):
            subsample = sample[idx:idx + args.n_frames]
            subsample_label = sample_labels[idx + args.n_frames - 1]
            subsample_flat = subsample.flatten()
            samples_flat.append(subsample_flat)
            # the label for each x is the label for the last frame in the x
            ys.append(int(np.ceil(subsample_label)))

    model = svm.SVC(C=args.penalty, kernel=args.kernel, degree=args.degree, verbose=True)

    samples_flat = np.array(samples_flat, dtype=np.float32)
    model.fit(samples_flat, ys)

    if not os.path.isdir(args.model_directory):
        os.makedirs(args.model_directory)

    stamp = "{:%B_%d_%H:%M:%S}".format(datetime.now())
    model_name = stamp + "_model.pkl"
    model_full_filename = os.path.join(args.model_directory, model_name)
    pickle.dump(model, open(model_full_filename, 'wb'))


def test(args):
    test_set = np.load(args.test_set)
    start = 0
    end = -1
    x = test_set["x"][start:end]
    labels = test_set["labels"][start:end]
    sample_names = test_set["sample_names"][start:end]

    model = pickle.load(open(args.model_file, 'rb'))
    print("unpickling done")

    xs = []
    ys = []
    y_hats = []
    precision = []
    recall = []
    means = []
    for sample, sample_labels in zip(x, labels):
        xs_per_sample = []
        ys_per_sample = []
        # chop up each samples into short segments
        for idx in range(0, len(sample) - args.n_frames, 1):
            x = sample[idx:idx + args.n_frames]
            xs_per_sample.append(x.flatten())
            # the label for each x is the label for the last frame in the x
            ys_per_sample.append(int(np.ceil(sample_labels[idx + args.n_frames])))
        xs.append(xs_per_sample)
        ys.append(ys_per_sample)
        y_hats_per_sample = model.predict(xs_per_sample)
        y_hats.append(y_hats_per_sample)
        tp = 0
        tn = 0
        fp = 0
        fn = 0
        t = 0
        s = 0
        for y_hat, y in zip(y_hats_per_sample, ys_per_sample):
            s += 1
            if y:
                t += 1
                if y_hat:
                    tp += 1
                else:
                    fp += 1
            else:
                if y_hat:
                    fn += 1
                else:
                    tn += 1
        precision.append(tp / (tp + fp))
        recall.append(tp / (tp + fn))
        means.append(t / s)

    print("Mean Precision: {:0.3f}".format(np.mean(precision)))
    print("Mean Recall: {:0.3f}".format(np.mean(recall)))
    print("Mean Y Value: {:0.3f}".format(np.mean(means)))

    xs = np.array(xs)
    ys = np.array(ys)
    y_hats = np.array(y_hats)

    if args.plot:
        import matplotlib.pyplot as plt
        for xs_per_sample, ys_per_sample, y_hats_per_sample, name in zip(xs, ys, y_hats, sample_names):
            img = xs_per_sample.T

            fig, ax1 = plt.subplots()
            fig.suptitle(name)
            ax1.imshow(img)

            ax2 = ax1.twinx()
            ax2.plot(ys_per_sample, label='y')
            ax2.plot(y_hats_per_sample, label='y_hat')

            fig.tight_layout()
        plt.legend()
        plt.show()


if __name__ == "__main__":
    main()
